plugins {
    id 'java'
    id 'eclipse'
    id "io.github.goooler.shadow" version "8.1.7"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
}

group = 'com.orleansmc'
version = '0.1'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven {
        setName("elytrium-repo")
        setUrl("https://maven.elytrium.net/repo/")
    }
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven { url 'https://repo.william278.net/releases' }
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
}

dependencies {
    compileOnly(fileTree("${project.rootDir}/lib") { include("*.jar") })
    implementation 'redis.clients:jedis:5.1.3'
    compileOnly 'io.lettuce:lettuce-core:6.3.2.RELEASE'
    annotationProcessor "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"
    compileOnly("net.elytrium.limboapi:api:1.1.25")
    compileOnly "net.william278.huskhomes:huskhomes-bukkit:4.7"
    compileOnly "io.papermc.paper:paper-api:1.21.1-R0.1-SNAPSHOT"
    compileOnly "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"
    compileOnly 'me.lucko:helper:5.6.14'
    compileOnly 'me.lucko:helper-mongo:1.2.0'
    compileOnly 'me.clip:placeholderapi:2.11.6'
    compileOnly 'com.github.LoneDev6:itemsadder-api:3.6.3-beta-14'
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
}

shadowJar {
    relocate 'com.github.stefvanschie.inventoryframework', 'com.orleansmc.orleans.realms.inventoryframework'
    minimize()
}
jar.enabled = false
assemble.dependsOn(shadowJar)

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
